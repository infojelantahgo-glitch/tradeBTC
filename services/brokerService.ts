// This service simulates interactions with a trading broker's API.
// In a real-world application, this logic would live on a secure backend server,
// and the frontend would call that server, not the broker directly.

import type { TradingPlan } from '../types';

interface ExecutionResult {
  success: boolean;
  message: string;
  orderId?: string;
  timestamp?: string;
}

/**
 * Simulates placing a trade order with a broker.
 * @param plan The trading plan generated by the AI.
 * @param symbol The stock/crypto symbol to trade.
 * @returns A promise that resolves with the result of the simulated execution.
 */
export const executeTrade = (plan: TradingPlan, symbol: string): Promise<ExecutionResult> => {
  console.log("--- SIMULATING TRADE EXECUTION ---");
  console.log(`Symbol: ${symbol}`);
  console.log(`Signal: ${plan.signal}`);
  console.log(`Entry Price: ${plan.entry_price}`);
  console.log(`Take Profit 1: ${plan.take_profit_1}`);
  console.log(`Stop Loss: ${plan.stop_loss}`);
  console.log("------------------------------------");

  return new Promise(resolve => {
    // Simulate network latency (e.g., 1.5 seconds)
    setTimeout(() => {
      const isSuccess = Math.random() > 0.1; // 90% chance of success for simulation

      if (isSuccess) {
        resolve({
          success: true,
          message: `Order untuk ${symbol} (${plan.signal}) berhasil dikirim.`,
          orderId: `SIM-${Date.now()}`,
          timestamp: new Date().toISOString(),
        });
      } else {
        resolve({
          success: false,
          message: 'Koneksi ke pialang gagal. Silakan coba lagi.',
        });
      }
    }, 1500);
  });
};
